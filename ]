#!/usr/bin/env python

# Author: Marek Filip <wecros|xfilip46>
# Date: 2020/01/03

import sys
import wave

import matplotlib.pyplot as plt
import numpy as np
import scipy.signal

from lib import open_wave, centralize_signal, normalize_signal, \
                get_signal_frames, ms2sample, SAMPLE_RATE, \
                get_similar_subsignal, OUTPUT_PATH, save_figure

import ex3


def plot(char, save):
    """Plot the frequency characterstic filter of the maskon/maskoff tones."""
    fig, ax_char = plt.subplots(1, constrained_layout=True)
    fig.set_size_inches(8.0, 6.0)
    fig.canvas.set_window_title('Excercise 6')

    ax_char.plot(char)

    ax_char.set_title('Frequency characteristic filter')
    ax_char.set_xlabel('Spectrum of frames')
    ax_char.set_ylabel('y')

    if save:
        save_figure(fig, 'ex6')
    else:
        plt.show()


def output():
    """Return the frequency characteristic filter."""
    maskon_sen: wave.Wave_read = open_wave('maskon_sentence.wav', 'rb')
    # The whole recording of maskoff_tone
    maskoff_sen: wave.Wave_read = open_wave('maskoff_sentence.wav', 'rb')
    maskon_frames: bytes = maskon_wav.readframes(-1)
    maskoff_frames: bytes = maskoff_wav.readframes(-1)
    maskon_wav.close()
    maskoff_wav.close()

    maskon: np.ndarray = np.frombuffer(maskon_frames, dtype=np.int16)
    maskoff: np.ndarray = np.frombuffer(maskoff_frames, dtype=np.int16)

    # Cut the maskon sound to 1s - 16,000 samples
    maskon = maskon[200:16200]
    # Get the part of the maskoff_tone that is most similar to the 1s of maskon
    maskoff = get_similar_subsignal(maskon, maskoff)

    maskon_frames, maskoff_frames = ex3.output()

    maskon_center = centralize_signal(maskon)
    maskoff_center = centralize_signal(maskoff)
    maskon_normal = normalize_signal(maskon_center)
    maskoff_normal = normalize_signal(maskoff_center)

    maskon_frames = get_signal_frames(maskon_normal)
    maskoff_frames = get_signal_frames(maskoff_normal)
    # Remove the last frame containing only half of the needed values.
    maskon_frames.pop()
    maskoff_frames.pop()
    maskon_frames, maskoff_frames = ex3.output()

    # Get the maskon and maskoff DFTs
    N = 1024
    maskon_dfts = np.fft.fft(maskon_frames, n=N)
    maskoff_dfts = np.fft.fft(maskoff_frames, n=N)

    fraction = maskon_dfts / maskoff_dfts

    # Make the values absolute
    fraction_abs = compute_log_spectogram(fraction)
    return [np.mean([frame[i] for frame in fraction_abs]) for i in range(N//2)]


def main(save=False):
    freqz_char_filter = output()
    plot(freqz_char_filter, save)


if __name__ == '__main__':
    main()
